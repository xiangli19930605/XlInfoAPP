package me.jessyan.armscomponent.commonsdk.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import me.jessyan.armscomponent.commonsdk.bean.UserEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ENTITY".
*/
public class UserEntityDao extends AbstractDao<UserEntity, String> {

    public static final String TABLENAME = "USER_ENTITY";

    /**
     * Properties of entity UserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, String.class, "uid", true, "UID");
        public final static Property Nick = new Property(1, String.class, "nick", false, "NICK");
        public final static Property Avatar = new Property(2, String.class, "avatar", false, "AVATAR");
        public final static Property IsSex = new Property(3, boolean.class, "isSex", false, "IS_SEX");
        public final static Property TitlePaper = new Property(4, String.class, "titlePaper", false, "TITLE_PAPER");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property BirthDay = new Property(6, String.class, "birthDay", false, "BIRTH_DAY");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property School = new Property(8, String.class, "school", false, "SCHOOL");
        public final static Property College = new Property(9, String.class, "college", false, "COLLEGE");
        public final static Property Major = new Property(10, String.class, "major", false, "MAJOR");
        public final static Property Education = new Property(11, String.class, "education", false, "EDUCATION");
        public final static Property Year = new Property(12, String.class, "year", false, "YEAR");
        public final static Property ClassNumber = new Property(13, String.class, "classNumber", false, "CLASS_NUMBER");
        public final static Property Signature = new Property(14, String.class, "signature", false, "SIGNATURE");
        public final static Property IsBlack = new Property(15, boolean.class, "isBlack", false, "IS_BLACK");
        public final static Property BlackType = new Property(16, int.class, "blackType", false, "BLACK_TYPE");
        public final static Property IsStranger = new Property(17, boolean.class, "isStranger", false, "IS_STRANGER");
        public final static Property UserName = new Property(18, String.class, "userName", false, "USER_NAME");
        public final static Property Phone = new Property(19, String.class, "phone", false, "PHONE");
        public final static Property Email = new Property(20, String.class, "email", false, "EMAIL");
        public final static Property CreatedTime = new Property(21, String.class, "createdTime", false, "CREATED_TIME");
        public final static Property UpdatedTime = new Property(22, String.class, "updatedTime", false, "UPDATED_TIME");
    }


    public UserEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ENTITY\" (" + //
                "\"UID\" TEXT PRIMARY KEY NOT NULL ," + // 0: uid
                "\"NICK\" TEXT," + // 1: nick
                "\"AVATAR\" TEXT," + // 2: avatar
                "\"IS_SEX\" INTEGER NOT NULL ," + // 3: isSex
                "\"TITLE_PAPER\" TEXT," + // 4: titlePaper
                "\"ADDRESS\" TEXT," + // 5: address
                "\"BIRTH_DAY\" TEXT," + // 6: birthDay
                "\"NAME\" TEXT," + // 7: name
                "\"SCHOOL\" TEXT," + // 8: school
                "\"COLLEGE\" TEXT," + // 9: college
                "\"MAJOR\" TEXT," + // 10: major
                "\"EDUCATION\" TEXT," + // 11: education
                "\"YEAR\" TEXT," + // 12: year
                "\"CLASS_NUMBER\" TEXT," + // 13: classNumber
                "\"SIGNATURE\" TEXT," + // 14: signature
                "\"IS_BLACK\" INTEGER NOT NULL ," + // 15: isBlack
                "\"BLACK_TYPE\" INTEGER NOT NULL ," + // 16: blackType
                "\"IS_STRANGER\" INTEGER NOT NULL ," + // 17: isStranger
                "\"USER_NAME\" TEXT," + // 18: userName
                "\"PHONE\" TEXT," + // 19: phone
                "\"EMAIL\" TEXT," + // 20: email
                "\"CREATED_TIME\" TEXT," + // 21: createdTime
                "\"UPDATED_TIME\" TEXT);"); // 22: updatedTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
        stmt.bindLong(4, entity.getIsSex() ? 1L: 0L);
 
        String titlePaper = entity.getTitlePaper();
        if (titlePaper != null) {
            stmt.bindString(5, titlePaper);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String birthDay = entity.getBirthDay();
        if (birthDay != null) {
            stmt.bindString(7, birthDay);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(9, school);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(10, college);
        }
 
        String major = entity.getMajor();
        if (major != null) {
            stmt.bindString(11, major);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(12, education);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(13, year);
        }
 
        String classNumber = entity.getClassNumber();
        if (classNumber != null) {
            stmt.bindString(14, classNumber);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(15, signature);
        }
        stmt.bindLong(16, entity.getIsBlack() ? 1L: 0L);
        stmt.bindLong(17, entity.getBlackType());
        stmt.bindLong(18, entity.getIsStranger() ? 1L: 0L);
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(19, userName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(20, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(21, email);
        }
 
        String createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindString(22, createdTime);
        }
 
        String updatedTime = entity.getUpdatedTime();
        if (updatedTime != null) {
            stmt.bindString(23, updatedTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserEntity entity) {
        stmt.clearBindings();
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(1, uid);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(2, nick);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(3, avatar);
        }
        stmt.bindLong(4, entity.getIsSex() ? 1L: 0L);
 
        String titlePaper = entity.getTitlePaper();
        if (titlePaper != null) {
            stmt.bindString(5, titlePaper);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String birthDay = entity.getBirthDay();
        if (birthDay != null) {
            stmt.bindString(7, birthDay);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(9, school);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(10, college);
        }
 
        String major = entity.getMajor();
        if (major != null) {
            stmt.bindString(11, major);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(12, education);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(13, year);
        }
 
        String classNumber = entity.getClassNumber();
        if (classNumber != null) {
            stmt.bindString(14, classNumber);
        }
 
        String signature = entity.getSignature();
        if (signature != null) {
            stmt.bindString(15, signature);
        }
        stmt.bindLong(16, entity.getIsBlack() ? 1L: 0L);
        stmt.bindLong(17, entity.getBlackType());
        stmt.bindLong(18, entity.getIsStranger() ? 1L: 0L);
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(19, userName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(20, phone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(21, email);
        }
 
        String createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindString(22, createdTime);
        }
 
        String updatedTime = entity.getUpdatedTime();
        if (updatedTime != null) {
            stmt.bindString(23, updatedTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserEntity readEntity(Cursor cursor, int offset) {
        UserEntity entity = new UserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nick
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar
            cursor.getShort(offset + 3) != 0, // isSex
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // titlePaper
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // birthDay
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // school
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // college
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // major
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // education
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // year
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // classNumber
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // signature
            cursor.getShort(offset + 15) != 0, // isBlack
            cursor.getInt(offset + 16), // blackType
            cursor.getShort(offset + 17) != 0, // isStranger
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // userName
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // phone
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // email
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // createdTime
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // updatedTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserEntity entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNick(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsSex(cursor.getShort(offset + 3) != 0);
        entity.setTitlePaper(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBirthDay(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSchool(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCollege(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMajor(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setEducation(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setYear(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setClassNumber(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSignature(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setIsBlack(cursor.getShort(offset + 15) != 0);
        entity.setBlackType(cursor.getInt(offset + 16));
        entity.setIsStranger(cursor.getShort(offset + 17) != 0);
        entity.setUserName(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPhone(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setEmail(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setCreatedTime(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setUpdatedTime(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserEntity entity, long rowId) {
        return entity.getUid();
    }
    
    @Override
    public String getKey(UserEntity entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserEntity entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
